AD webpack production mode:

// plugins: [new webpack.HotModuleReplacementPlugin()], I haven't done it yet
// Production mode enables all sorts of optimizations out of the box.
// Including minification, scope hoisting, tree-shaking and more.
// parts.uglifyJS() not necessary



const UglifyJsPlugin = require("uglifyjs-webpack-plugin");

exports.uglifyJS = () => ({
  plugins: [new UglifyJsPlugin()],
});

//------------------------------------------------

Generate clip-path:
https://bennettfeely.com/clippy/

https://www.npmjs.com/package/clip-path-polyfill

src/css/_custom.css:18:1: CSS Masks not supported by: Edge (17) and only partially supported by: Edge (18), Chrome (70,71,72,73), 
Safari (12,12.1), Opera (58), iOS Safari (11.0-11.2,11.3-11.4,12.0-12.1,12.2), Android Browser (4.4.3-4.4.4,4.2-4.3), 
Chrome for Android (73), Samsung Internet (8.2,9.2) (css-masks)
src/css/_custom.css:18:1: CSS clip-path property (for HTML) not supported by: Edge (17,18), Android Browser (4.2-4.3) 
and only partially supported by: Chrome (70,71,72,73), Safari (12,12.1), Opera (58), 
iOS Safari (11.0-11.2,11.3-11.4,12.0-12.1,12.2), Android Browser (4.4.3-4.4.4), Chrome for Android (73), 
Samsung Internet (8.2,9.2) (css-clip-path)
---------------------------------------------------------------------------------

From a page speed standpoint, @import from a CSS file should almost never be used, as it can prevent stylesheets 
from being downloaded concurrently. 
If, on the other hand, both stylesheets are referenced in <link> elements in the main HTML page, 
both can be downloaded at the same time.
If both stylesheets are always loaded together, it can also be helpful to simply combine them into a single file.
----------------------------------------------------------------------------------
<!--[if IE]>
Conditional comments only work in IE, and are thus excellently suited to give special instructions meant only for IE
----------------------------------------------------------------------------------
Tools like webpack-bundle-analyzer are great for analyzing your built JavaScript bundles and 
import-cost for Visual Code is excellent for visualizing expensive dependencies during your local iteration workflow 
(e.g. when you `npm install` and import a package).
Tools like Webpack Bundle Analyzer, Source Map Explorer and Bundle Buddy allow you to audit your bundles 
for opportunities to trim them down.
Lighthouse is a tool baked into the Chrome Developer Tools. Itâ€™s also available as a Chrome extension. It gives you 
an in-depth performance analysis that highlights opportunities to improve performance.
----------------------------------------------------------------------------------
https://www.webpagetest.org/ << webpage performance test
Code coverage (wejdz na audits i na dole po lewej jest menu, rozwin i tam jest coverage) is a feature in DevTools that allows you to discover unused JavaScript (and CSS) in your pages.
----------------------------------------------------------------------------------
https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4
----------------------------------------------------------------------------------
https://frontendchecklist.io/
----------------------------------------------------------------------------------
https://levelup.gitconnected.com/top-web-development-articles-of-2018-bd5c3900110b
----------------------------------------------------------------------------------
https://modernizr.github.io/Modernizr/test/index.html

Modernizr.
1. modernizer is installed globally.
2. Prepare a modernizr-config.json on their website (Download, choose rules to test, click Build, choose config from the modal
that will appear).
3. Run npx modernizr -c modernizr-config.json
in the folder where the config file is. This will create your custom build modernizr.js(minified), with just the rules you have 
specified earlier. Move modernizr.js to js/vendor.
4. When you run npx run build, all files from the folder will be copied to dist/js/vendor 

NOTE: Adding "classPrefix": "mod_", to config will will prevent it from changing no-js to js. Bug?
NOTE: When running page from file system rather than on server, modernizr works but doesnt change no-js to js. Probably it
should be like this...
PROBLEM: Webpack doesnt create link to modernizr in the body of index.html. So I have to add link explicitely in index.html.
I tried to add entry for modernizr in webpack.config.json, and then add chunk for it in HtmlWebpackPlugin config in
webpack.parts.js but webpack hangs. I guess the file goes through Babel. i couldnt exclude the vendor folder in babel options.
PROBLEM: When I try to import modernizr in to main.js, webpack hangs.<s

